{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["// import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\n \n// export const Post = defineDocumentType(() => ({\n//   // The name of the document type\n//   name: \"Post\",\n \n//   // The type of the files to parse. 'md' also works\n//   contentType: \"mdx\",\n \n//   // The path of the mdx files, relative to contentDirPath\n//   filePathPattern: \"app/content/posts/**/*.mdx\",\n//   filePathPattern: \"posts/*.mdx\",\n//   filePathPattern: \"content/posts/**/*.mdx\",\n\n//   // Fields present in the frontmatter of the MDX file\n//   fields: {\n//     title: { type: \"string\", required: true },\n//     published: { type: \"string\", required: true },\n//     description: { type: \"string\" },\n//     status: {\n//       type: \"enum\",\n//       options: [\"draft\", \"published\"],\n//       required: true,\n//     },\n//   },\n// }))\n \n// export default makeSource({\n//   contentDirPath: \"content\",\n//   documentTypes: [Post],\n// })\n\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\"\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n}\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  // filePathPattern: `app/content/posts/**/*.mdx`,\n  filePathPattern: \"posts/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n  },\n  computedFields,\n}))\n\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Post],\n})"],
  "mappings": ";AAgCA,SAAS,oBAAoB,kBAAkB;AAG/C,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA;AAAA,EAEN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAGF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACtB,CAAC;",
  "names": []
}
