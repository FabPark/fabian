{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\n \nexport const Post = defineDocumentType(() => ({\n  // The name of the document type\n  name: \"Post\",\n \n  // The type of the files to parse. 'md' also works\n  contentType: \"mdx\",\n \n  // The path of the mdx files, relative to contentDirPath\n  filePathPattern: \"posts/*.mdx\",\n \n  // Fields present in the frontmatter of the MDX file\n  fields: {\n    title: { type: \"string\", required: true },\n    published: { type: \"string\", required: true },\n    description: { type: \"string\" },\n    status: {\n      type: \"enum\",\n      options: [\"draft\", \"published\"],\n      required: true,\n    },\n  },\n}))\n \nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Post],\n})\n\n// import { defineDocumentType, makeSource } from \"contentlayer/source-files\"\n\n// /** @type {import('contentlayer/source-files').ComputedFields} */\n// const computedFields = {\n//   slug: {\n//     type: \"string\",\n//     resolve: (doc) => `/${doc._raw.flattenedPath}`,\n//   },\n//   slugAsParams: {\n//     type: \"string\",\n//     resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n//   },\n// }\n\n// export const Post = defineDocumentType(() => ({\n//   name: \"Post\",\n//   filePathPattern: `app/content/posts/**/*.mdx`,\n//   contentType: \"mdx\",\n//   fields: {\n//     title: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     description: {\n//       type: \"string\",\n//     },\n//     date: {\n//       type: \"date\",\n//       required: true,\n//     },\n//   },\n//   computedFields,\n// }))\n\n\n// export default makeSource({\n//   contentDirPath: \"./content\",\n//   documentTypes: [Post],\n// })"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA;AAAA,EAE5C,MAAM;AAAA;AAAA,EAGN,aAAa;AAAA;AAAA,EAGb,iBAAiB;AAAA;AAAA,EAGjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC5C,aAAa,EAAE,MAAM,SAAS;AAAA,IAC9B,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,WAAW;AAAA,MAC9B,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACtB,CAAC;",
  "names": []
}
